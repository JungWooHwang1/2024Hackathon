import requests
import json
from pprint import pprint
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}})

# 지역 코드와 이름 매핑
region_codes = {
    "11": "서울",
    "26": "부산",
    "27": "대구",
    "28": "인천",
    "29": "광주",
    "30": "대전",
    "31": "울산",
    "41": "경기",
    "42": "강원",
    "43": "충북",
    "44": "충남",
    "45": "전북",
    "46": "전남",
    "47": "경북",
    "48": "경남",
    "49": "제주",
}

# 시군구 코드와 이름 매핑
subregion_codes = {
    "11110": "종로구", "11140": "중구", "11170": "용산구", "11200": "성동구",
    "11215": "광진구", "11230": "동대문구", "11260": "중랑구", "11290": "성북구",
    "11305": "강북구", "11320": "도봉구", "11350": "노원구", "11380": "은평구",
    "11410": "서대문구", "11440": "마포구", "11470": "양천구", "11500": "강서구",
    "11530": "구로구", "11545": "금천구", "11560": "영등포구", "11590": "동작구",
    "11620": "관악구", "11650": "서초구", "11680": "강남구", "11710": "송파구",
    "11740": "강동구", "26110": "중구", "26140": "서구", "26170": "동구",
    "26200": "영도구", "26230": "부산진구", "26260": "동래구", "26290": "남구",
    "26320": "북구", "26350": "해운대구", "26380": "사하구", "26410": "금정구",
    "26440": "강서구", "26470": "연제구", "26500": "수영구", "26530": "사상구",
    "26710": "기장군", "27110": "중구", "27140": "동구", "27170": "서구",
    "27200": "남구", "27230": "북구", "27260": "수성구", "27290": "달서구",
    "27710": "달성군", "28110": "중구", "28140": "동구", "28170": "남구",
    "28185": "연수구", "28200": "남동구", "28237": "부평구", "28245": "계양구",
    "28260": "서구", "28710": "강화군", "28720": "옹진군", "29110": "동구",
    "29140": "서구", "29155": "남구", "29170": "북구", "29200": "광산구",
    "30110": "동구", "30140": "중구", "30170": "서구", "30200": "유성구",
    "30230": "대덕구", "31110": "중구", "31140": "남구", "31170": "동구",
    "31200": "북구", "31710": "울주군", "41111": "수원시 장안구", "41113": "수원시 권선구",
    "41115": "수원시 팔달구", "41117": "수원시 영통구", "41131": "성남시 수정구",
    "41133": "성남시 중원구", "41135": "성남시 분당구", "41150": "의정부시",
    "41171": "안양시 만안구", "41173": "안양시 동안구", "41190": "부천시",
    "41210": "광명시", "41220": "평택시", "41250": "동두천시", "41271": "안산시 상록구",
    "41273": "안산시 단원구", "41281": "고양시 덕양구", "41285": "고양시 일산동구",
    "41287": "고양시 일산서구", "41290": "과천시", "41310": "구리시", "41360": "남양주시",
    "41370": "오산시", "41390": "시흥시", "41410": "군포시", "41430": "의왕시",
    "41450": "하남시", "41461": "용인시 처인구", "41463": "용인시 기흥구",
    "41465": "용인시 수지구", "41480": "파주시", "41500": "이천시", "41550": "안성시",
    "41570": "김포시", "41590": "화성시", "41610": "광주시", "41630": "양주시",
    "41650": "포천시", "41670": "여주시", "41800": "연천군", "41820": "가평군",
    "41830": "양평군", "42110": "춘천시", "42130": "원주시", "42150": "강릉시",
    "42170": "동해시", "42190": "태백시", "42210": "속초시", "42230": "삼척시",
    "42720": "홍천군", "42730": "횡성군", "42750": "영월군", "42760": "평창군",
    "42770": "정선군", "42780": "철원군", "42790": "화천군", "42800": "양구군",
    "42810": "인제군", "42820": "고성군", "42830": "양양군", "43111": "청주시 상당구",
    "43112": "청주시 서원구", "43113": "청주시 흥덕구", "43114": "청주시 청원구",
    "43130": "충주시", "43150": "제천시", "43720": "보은군", "43730": "옥천군",
    "43740": "영동군", "43745": "증평군", "43750": "진천군", "43760": "괴산군",
    "43770": "음성군", "43800": "단양군", "44131": "천안시 동남구", "44133": "천안시 서북구",
    "44150": "공주시", "44180": "보령시", "44200": "아산시", "44210": "서산시",
    "44230": "논산시", "44250": "계룡시", "44270": "당진시", "44710": "금산군",
    "44760": "부여군", "44770": "서천군", "44790": "청양군", "44800": "홍성군",
    "44810": "예산군", "44825": "태안군", "45111": "전주시 완산구", "45113": "전주시 덕진구",
    "45130": "군산시", "45140": "익산시", "45180": "정읍시", "45190": "남원시",
    "45210": "김제시", "45710": "완주군", "45720": "진안군", "45730": "무주군",
    "45740": "장수군", "45750": "임실군", "45770": "순창군", "45790": "고창군",
    "45800": "부안군", "46110": "목포시", "46130": "여수시", "46150": "순천시",
    "46170": "나주시", "46230": "광양시", "46710": "담양군", "46720": "곡성군",
    "46730": "구례군", "46770": "고흥군", "46780": "보성군", "46790": "화순군",
    "46800": "장흥군", "46810": "강진군", "46820": "해남군", "46830": "영암군",
    "46840": "무안군", "46860": "함평군", "46870": "영광군", "46880": "장성군",
    "46890": "완도군", "46900": "진도군","46910":"신안군","47111":"포항시 남구",
    "47113":"포항시 북구","47130":"경주시","47150":"김천시","47170":"안동시",
    "47190":"구미시","47210":"영주시","47230":"영천시","47250":"상주시",
    "47280":"문경시","47290":"경산시","47720":"군위군","47730":"의성군",
    "47750":"청송군","47760":"영양군","47770":"영덕군","47820":"청도군",
    "47830":"고령군","47840":"성주군","47850":"칠곡군","47900":"예천군",
    "47920":"봉화군","47930":"울진군","47940":"울릉군","48121":"창원시 의창구",
    "48123":"창원시 성산구","48125":"창원시 마산합포구","48127":"창원시 마산회원구",
    "48129":"창원시 진해구","48170":"진주시","48220":"통영시","48240":"사천시",
    "48250":"김해시","48270":"밀양시","48310":"거제시","48330":"양산시","48720":"의령군",
    "48730":"함안군","48740":"창녕군","48820":"고성군","48840":"남해군","48850":"하동군",
    "48860":"산청군","48870":"함양군","48880":"거창군","48890":"합천군","49110":"제주시","49130":"서귀포시"
}

# 서울특별시: 25개
# 부산광역시: 16개
# 대구광역시: 8개
# 인천광역시: 10개
# 광주광역시: 5개
# 대전광역시: 5개
# 울산광역시: 5개
# 세종특별자치시: 포함되지 않음
# 경기도: 31개
# 강원도: 18개
# 충청북도: 11개
# 충청남도: 15개
# 전라북도: 14개
# 전라남도: 22개
# 경상북도: 23개
# 경상남도: 18개
# 제주특별자치도: 2개
# 총 시,군,구 225개

# 질병 코드와 이름 매핑
disease_codes = {
    "1": "감기",
    "2": "눈병",
    "3": "식중독",
    "4": "천식",
    "5": "피부염",
    "15": "심뇌혈관 질환",
}

url = 'http://apis.data.go.kr/B550928/dissForecastInfoSvc/getDissForecastInfo'
serviceKey = 'Otv1v/0f39FS6HYgixWWtboXP3pJDTmelBL70DKU3M3dc2BZC+i+s89GCS6Xqb+DnPfo5ziNfrSKuP7r7Occng=='

@app.route('/', methods=['GET'])
def home():
    return "hello"

@app.route('/api/forecast', methods=['GET'])
def get_forecast():
    # 클라이언트로부터 받는 파라미터
    dissCd = request.args.get('dissCd')
    znCd = request.args.get('znCd')
    lowrnkZnCd = request.args.get('lowrnkZnCd')

    # API 요청 파라미터 설정
    params = {
        'serviceKey': serviceKey,
        'numOfRows': '1000',
        'pageNo': '1',
        'type': 'json',
        'dissCd': dissCd,
        'znCd': znCd
    }

    # API 호출
    response = requests.get(url, params=params)

    if response.status_code == 200:
        try:
            data = response.json()
            items = data.get('response', {}).get('body', {}).get('items', [])
            filtered_items = []

            for item in items:
                if item.get('lowrnkZnCd') == lowrnkZnCd:
                    filtered_items.append({
                        "일자": item.get('dt'),
                        "지역명": region_codes.get(znCd, "Unknown Region") + " " + subregion_codes.get(lowrnkZnCd, "Unknown Subregion"),
                        "질병명": disease_codes.get(dissCd, "Unknown Disease"),
                        "예측진료건수": item.get('cnt'),
                        "예측위험도": item.get('risk'),
                        "위험도지침": item.get('dissRiskXpln')
                    })

            return jsonify(filtered_items)

        except json.JSONDecodeError:
            return jsonify({"error": "JSON 디코딩 오류가 발생했습니다."}), 500
    else:
        return jsonify({"error": f"요청 실패: 상태 코드 {response.status_code}"}), response.status_code

if __name__ == '__main__':
    app.run(debug=True, host="0.0.0.0", port="5003")


# params = {
#     'serviceKey': serviceKey,
#     'numOfRows': '100',
#     'pageNo': '1',
#     'type': 'json',
#     'dissCd': '15',
#     'znCd': '11'
# }

# response = requests.get(url, params=params)

# if response.status_code == 200:
#     try:
#         data = response.json()
#         items = data.get('response', {}).get('body', {}).get('items', [])

#         processed_data = []
#         for item in items:
#             dissCd = item.get('dissCd')
#             dt = item.get('dt')
#             znCd = item.get('znCd')
#             lowrnkZnCd = item.get('lowrnkZnCd')
#             cnt = item.get('cnt')
#             risk = item.get('risk')
#             dissRiskXpln = item.get('dissRiskXpln')

#             # 코드에서 이름으로 변환
#             disease_name = disease_codes.get(dissCd, "Unknown Disease")
#             region_name = region_codes.get(znCd, "Unknown Region")
#             subregion_name = subregion_codes.get(lowrnkZnCd, "Unknown Subregion")

#             processed_data.append({
#                 "일자": dt,
#                 "지역명" : region_name + " " + subregion_name + "   ",
#                 "질병명": disease_name,
#                 "예측진료건수": cnt,
#                 "예측위험도": risk,
#                 "위험도 지침": dissRiskXpln
#             })

#         # DataFrame으로 변환
#         df = pd.DataFrame(processed_data)

#         # DataFrame 출력
#         print(df)

#     except json.JSONDecodeError:
#         print("JSON 디코딩 오류가 발생했습니다.")
#         print("응답 내용:", response.text)
# else:
#     print(f"요청 실패: 상태 코드 {response.status_code}")
#     print(response.text)
